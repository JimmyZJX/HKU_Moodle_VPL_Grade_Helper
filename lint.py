#!/usr/bin/env python

from os import listdir
from os.path import isfile, isdir, join
import logging
import os
from subprocess import run, PIPE
import re
import csv

log = logging.getLogger()
handler = logging.StreamHandler()
formatter = logging.Formatter(
		'%(asctime)s %(name)-12s %(levelname)-6s %(message)s')
handler.setFormatter(formatter)
log.addHandler(handler)
log.setLevel(logging.INFO)

workingDir = input("working folder: ")
outputFile = join(workingDir, str(int(input("output csv priority (integer, default 100): ") or "100")) + ".csv")

stdDir = join(workingDir, "0")
if not isdir(stdDir):
	log.error("Bad folder: cannot find standard program folder '%s/0/'!" % workingDir)
	quit()

programs = [f[:-4] for f in listdir(stdDir)
	if isfile(join(stdDir, f)) and f.endswith(".cpp")]

def joinToHTML(str):
	return "<p>%s</p>" % ("</p><p>".join(str.split("\n")))

# CppLint students' programs and rewrite in HTML format.
student = {} # id -> comment
studentID = [f for f in listdir(workingDir) if isdir(join(workingDir, f)) and f != "0"]

i = 0
for sid in studentID:
	i += 1
	log.info("Processing student #%s (%d/%d)" % (sid, i, len(studentID)))
	studentDir = join(workingDir, sid)
	student[sid] = ""
	for program in programs:
		# compile
		try:
			msg = run(["py", "-2", "cpplint.py", "--filter=-legal,-build/namespaces", "--verbose=2", join(studentDir, program + ".cpp")],
				shell=True, stdout=PIPE, stderr=PIPE).stderr.decode("ASCII")
			student[sid] += "<p><br></p><p>There are also some comments on your programming style, generated by CPPLint Tool of Google StyleGuide on GitHub.</p>" + joinToHTML(msg)
		except Exception as e:
			log.error("Failed to run lint for `%s.cpp`." % program, e)
			student[sid] += "<p>Failed to run lint for `%s.cpp`.</p>" % program

# print(student)

with open(outputFile, "w", newline="") as oFile:
	csvWritter = csv.writer(oFile)
	csvWritter.writerow(['sid', 'comment'])
	for sid, comment in student.items():
		csvWritter.writerow([sid, comment])

log.info("CSV Written to %s. Total #record = %d." % (outputFile, len(student)))
os.system("pause")

